<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HyterMatrix]]></title>
  <link href="https://hyter.me/atom.xml" rel="self"/>
  <link href="https://hyter.me/"/>
  <updated>2020-06-11T10:57:21+08:00</updated>
  <id>https://hyter.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[匹配中国人姓名(可以比检测少数名族的姓名带"·"那种)]]></title>
    <link href="https://hyter.me/re-chinese-name.html"/>
    <updated>2020-06-11T10:50:20+08:00</updated>
    <id>https://hyter.me/re-chinese-name.html</id>
    <content type="html"><![CDATA[
<p>最近系统需要校验少数名族姓名（就是少数名族带·的）</p>

<span id="more"></span><!-- more -->

<p>PHP的代码</p>

<pre class="line-numbers"><code class="language-php">function checkChineseName($name)
{
    if(!$name){
        return false;
    }
   //有名字长度超过20算我输
    if(mb_strlen($name) &lt; 2 || mb_strlen($name) &gt; 20){
        return false;
    }
    if(preg_match(&#39;/^[\x{4e00}-\x{9fa5}]+[·?]?[\x{4e00}-\x{9fa5}]+$/u&#39;, $name,$matchers)){
        return true;
    }else{
        return false;
    }
}
</code></pre>

<p>js的正则</p>

<pre class="line-numbers"><code class="language-javascript">/^[\u4E00-\u9FA5\uf900-\ufa2d·s]{2,20}$/
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Git下创建一个空分支]]></title>
    <link href="https://hyter.me/git-create-empty-branch.html"/>
    <updated>2020-05-28T11:58:54+08:00</updated>
    <id>https://hyter.me/git-create-empty-branch.html</id>
    <content type="html"><![CDATA[
<p>有时候我们需要在Git下创建一个空分支，从头开始Coding —— 这大概是那些重构帝最喜欢的事情。参考了github，才找到一个合适的方法。</p>

<p>怎样安全的进行这项操作<br/>
我们需要建一个“孤立”的空分支，为了尽可能的保证数据安全，最好还是重新clone一份代码。<br/>
<span id="more"></span><!-- more --></p>

<pre class="line-numbers"><code class="language-shell">$git clone https://github.com/user/repo.git
# Clone our repo
# Cloning into \&#39;repo\&#39;...
# remote: Counting objects: 2791, done.
# remote: Compressing objects: 100% (1225/1225), done.
# remote: Total 2791 (delta 1722), reused 2513 (delta 1493)
# Receiving objects: 100% (2791/2791), 3.77 MiB | 969 KiB/s, done.
# Resolving deltas: 100% (1722/1722), done.
</code></pre>

<p>开工<br/>
这里以github的操作为例，下面试图创建一个名为gh-pages的空分支</p>

<pre class="line-numbers"><code class="language-shell">$cd repo

$ git checkout --orphan gh-pages
# 创建一个orphan的分支，这个分支是独立的
Switched to a new branch \&#39;gh-pages\&#39;

git rm -rf .
# 删除原来代码树下的所有文件
rm \&#39;.gitignore\&#39;
</code></pre>

<p>注意这个时候你用git branch命令是看不见当前分支的名字的，除非你进行了第一次commit。</p>

<p>下面我们开始添加一些代码文件，例如这里新增了一个index.html</p>

<pre class="line-numbers"><code class="language-shell">$ echo \&quot;My GitHub Page\&quot; &gt; index.html
$ git add .
$ git commit -a -m \&quot;First pages commit\&quot;
$ git push origin gh-pages
在commit操作之后，你就可以用git branch命令看到新分支的名字了，然后push到远程仓库。
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记n次修改的gitlab配置仓库存储位置]]></title>
    <link href="https://hyter.me/change-gitlab-repository-path.html"/>
    <updated>2020-05-26T14:57:07+08:00</updated>
    <id>https://hyter.me/change-gitlab-repository-path.html</id>
    <content type="html"><![CDATA[
<p>gitlab通过rpm包安装后，默认存储位置在<code>/var/opt/gitlab/git-data/repositories</code>，通常需要更改此路径到单独的一个分区来存储仓库的数据。<br/>
<span id="more"></span><!-- more --></p>

<p>例如我这里把数据存放到<code>/data/gitlab</code>目录下</p>

<p>创建<code>/data/gitlab</code>目录</p>

<pre class="line-numbers"><code class="language-shell">mkdir -p /data/gitlab
</code></pre>

<p>修改gitlab配置文件，找到<code>git_data_dir</code> </p>

<pre class="line-numbers"><code class="language-shell">vim /etc/gitlab/gitlab.rb
</code></pre>

<pre class="line-numbers"><code class="language-shell">git_data_dirs({
   &quot;default&quot; =&gt; {
     &quot;path&quot; =&gt; &quot;/data/gitlab&quot;
    }
})

</code></pre>

<p>删除注释# 并把<code>/data/gitlab</code>写入<code>path</code>的值</p>

<p>停止当前gitlab，重新加载配置</p>

<pre class="line-numbers"><code class="language-shell">gitlab-ctl stop
gitlab-ctl reconfigure
</code></pre>

<p>重新加载后，会发现在<code>/data/gitlab</code>目录下多出一个<code>repositories</code>目录</p>

<p>最后启动gitlab即可</p>

<pre class="line-numbers"><code class="language-shell">gitlab-ctl start
</code></pre>

<h2 id="toc_0">解决宝塔安装修改配置无法启动nginx问题</h2>

<p>一般来说这里就完成了，但是 在宝塔面板安装gitlab修改后，会出现nginx不能启动的现象, 原因应该宝塔是为了防止nginx冲突, 把gitlab的nginx启动文件名改成了gitlab-web, 但有个配置文件没改造成的。</p>

<p>修改nginx启动文件</p>

<pre class="line-numbers"><code class="language-shell">vi /opt/gitlab/sv/nginx/run
</code></pre>

<p>把 </p>

<pre class="line-numbers"><code class="language-shell">exec chpst -P /opt/gitlab/embedded/sbin/nginx -p /var/opt/gitlab/nginx
</code></pre>

<p>改为</p>

<pre class="line-numbers"><code class="language-shell">exec chpst -P /opt/gitlab/embedded/sbin/gitlab-web -p /var/opt/gitlab/nginx
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC 如何卸载 Python]]></title>
    <link href="https://hyter.me/python-mac-uninstall.html"/>
    <updated>2020-05-11T15:17:55+08:00</updated>
    <id>https://hyter.me/python-mac-uninstall.html</id>
    <content type="html"><![CDATA[
<p>Mac 自带的 Python 已经能够满足我们的需要了，因此很多同学在安装完 Python 之后，又想要将其删除，或者称之为卸载。对于删除 Python，我们首先要知道其具体都安装了什么，实际上，在安装 Python 时，其自动生成：</p>

<ul>
<li>Python framework，即 Python 框架；</li>
<li>Python 应用目录；</li>
<li>指向 Python 的连接。
<span id="more"></span><!-- more -->
对于 Mac 自带的 Python，其框架目录为：
<code>shell
System/Library/Frameworks/Python.framework
</code>
而我们安装的 Python，其（默认）框架目录为：
<code>shell
/Library/Frameworks/Python.framework
</code>
接下来，我们就分别（在 Mac 终端进行）删除上面所提到的三部分。</li>
</ul>

<p>第 1 步，删除框架：</p>

<pre class="line-numbers"><code class="language-shell">sudo rm -rf /Library/Frameworks/Python.framework/Versions/x.x
</code></pre>

<p>第 2步，删除应用目录：</p>

<pre class="line-numbers"><code class="language-shell">sudo rm -rf &quot;/Applications/Python x.x&quot;
</code></pre>

<p>第 3 步，删除指向 Python 的连接：</p>

<pre class="line-numbers"><code class="language-shell">cd /usr/local/bin/
ls -l /usr/local/bin | grep &#39;../Library/Frameworks/Python.framework/Versions/x.x&#39; | awk &#39;{print $9}&#39; | tr -d @ | xargs rm
</code></pre>

<p>至此，我们已经成功删除 Python 的相关文件，其中x.x为 Python 的版本号。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决npm安装electron很慢的问题]]></title>
    <link href="https://hyter.me/electron-npm-install-yuan.html"/>
    <updated>2020-04-13T15:42:06+08:00</updated>
    <id>https://hyter.me/electron-npm-install-yuan.html</id>
    <content type="html"><![CDATA[
<p>无论是选择 <code>electron-builder</code>还是 <code>electron-packager</code>，甚至其它的各种流行 <code>electron</code>打包工具，总是会绕不开一个问题：脚本会下载特定版本的 <code>electron</code>的 <code>prebuild</code>版本。</p>

<p>而对于国内的广大 <code>electron</code>开发者来说，这个过程往往是非常漫长并且痛苦的。如何解决速度慢的这个问题呢？欢迎仔细阅</p>

<p>本文的主要测试环境是 <code>window</code>和 <code>mac</code>， <code>npm</code>的版本号均为 <code>5.6.0</code>。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">适用症状</h2>

<p><code>electron</code>打包的时候，下载慢下载慢！有&quot;下载龟速&quot;的类似问题的同学，适合查看本篇内容。如果下载过程很快的话，就不需要查看本篇内容了。</p>

<p>特征就是下载这些特定版本的 <code>electron</code>的时候，速度是几K到几十K每秒的速度，甚至是直接下载失败。而通过本文的办法，这个速度可以提高到几M每秒，瞬间下载完毕。</p>

<h2 id="toc_1">预处理方案：淘宝 <code>electron</code> 源</h2>

<p>淘宝的这个 <code>electron</code>镜像，真心是国内广大猿类的救星。本文中的主角也是这个 <code>electron</code>的淘宝镜像，地址如下：</p>

<ul>
<li><a href="https://segmentfault.com/go/4658L_o3chLyTgNe32JaMklm74xkFhFc9JQmVmGoUaySs3VHvqwMlsP0JocyK2mvb1ziLNFSXLpHsIHATlnxmwaV548">http://npm.taobao.org/mirrors/electron/</a></li>
</ul>

<p>简而言之，需要执行的前置命令是：</p>

<pre class="line-numbers"><code class="language-text">npm config set registry https://registry.npm.taobao.org/
npm config set ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/
</code></pre>

<h2 id="toc_2">解决方案一（win系统推荐）</h2>

<p>对于win系统，可以修改全局变量，很简单。新建用户全局变量即可。如下所示：<br/>
名称为 <code>ELECTRON_MIRROR</code>，值为： <code>http://npm.taobao.org/mirrors/electron/</code>。</p>

<p>注意，保存之后，要重新打开一个命令行窗体，这些全局变量才会生效！马上体验一下刷刷下载的感觉吧~ 对于国内用户来说，加速效果是非常的明显，效果特别好。</p>

<p>ps一下：这些下载好的文件，位于： <code>%LOCALAPPDATA%/electron/Cache</code>目录下面。</p>

<h2 id="toc_3">解决方案二（mac/centos系统推荐）</h2>

<p><code>mac</code>系统下，需要修改 <code>/etc/bashrc</code> 文件。见下图，在 <code>/etc/bashrc</code> 文件中，增加一条内容。当然，如果涉及到权限问题，下面的语句可以参考。</p>

<pre class="line-numbers"><code class="language-text">sudo vi /etc/bashrc
wq!
</code></pre>

<p>在 <code>/etc/bashrc</code> 文件中，要增加的设置：</p>

<pre class="line-numbers"><code class="language-text">export ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/
</code></pre>

<p>修改保存之后，记得执行一下 <code>source</code>命令使变量及时生效。</p>

<pre class="line-numbers"><code class="language-text">source /etc/bashrc
</code></pre>

<h2 id="toc_4">解决方案三（通用）</h2>

<p>这个方案不论系统，统一有效，就是在相关的命令之前都增加下面的命令。<br/>
比如运行 <code>electron-packager ./</code>的时候，增加 <code>ELECTRON_MIRROR=</code>类似字样：</p>

<pre class="line-numbers"><code class="language-text">ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/ electron-packager ./
</code></pre>

<h2 id="toc_5">解决方案四（通用）</h2>

<p>如果您不想修改环境变量的话，这里还有个比较适合小白的方式。就是使用迅雷下载好对应的安装 <code>zip</code>包和 <code>SHASUM256.txt</code>文件，然后复制到 <code>electron</code>的临时目录，然后再执行对应的命令，也是可以快速安装的。下载的地址是：</p>

<ul>
<li><a href="https://segmentfault.com/go/4658L_o3chLyTgNe32JaMklm74xkFhFc9JQmVmGoUaySs3VHvqwMlsP0JocyK2mvb1ziLNFSXLpHsIHATlnxmwaV548">http://npm.taobao.org/mirrors/electron/</a></li>
</ul>

<p>注意：这里的 <code>SHASUM256.txt</code>文件需要重命名一下，加上版本号的字样。例如: <code>SHASUM256.txt-1.7.9</code>。</p>

<h2 id="toc_6">总结</h2>

<p>手工安装特定版本的 <code>electron</code>的姿势如下，历史上曾经有过 <code>electron-prebuild</code>的表述，目前是过期的表述，目前两者已经统一为 <code>electron</code>字样了。</p>

<pre class="line-numbers"><code class="language-text">sudo npm install electron@5.7.0 -g
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Could not create temporary directory: 权限被拒绝]]></title>
    <link href="https://hyter.me/could-not-create-temporary-directory.html"/>
    <updated>2019-11-15T17:43:49+08:00</updated>
    <id>https://hyter.me/could-not-create-temporary-directory.html</id>
    <content type="html"><![CDATA[
<p>解决方式</p>

<pre class="line-numbers"><code class="language-shell">sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/  
</code></pre>

<p>重启之后，再更新就好了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 时间机器 Time Machine 备份速度太慢的解决方法 (加速备份命令)]]></title>
    <link href="https://hyter.me/speed-up-time-machine.html"/>
    <updated>2019-11-12T01:02:39+08:00</updated>
    <id>https://hyter.me/speed-up-time-machine.html</id>
    <content type="html"><![CDATA[
<p>相信用过一段时间电脑的人，都知道经常备份的重要性了。特别最近很多人需要将 Mac 升级到最新版本的 macOS Catalina，为防意外发生，就更需要在动手前做好备份了。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">macOS 时光机器</h2>

<p>macOS 自带的「时间机器」(Time Machine) 绝对就是 Mac 上最方便的备份工具了，一来完全免费，可以“无感”地替你默默在后台备份，而且因为它是苹果自家开发的，兼容性也最好，所以推荐大家都使用“时间机器”来备份 Mac 电脑。</p>

<h2 id="toc_1">解决 时间机器备份速度太慢的问题</h2>

<p>然而部分同学在尝试使用时间机器备份系统资料时，却发现它的首次备份速度非常慢，跟自己的网络和机器配置似乎并不匹配，甚至有时花费超过 48 小时都无法完成，即便接了网线、关掉所有 APP 后，备份速度都没有明显提升。</p>

<p>其实，时光机器备份太慢是由于 macOS 本身对其进行了限流的措施，对硬盘读写的频率和内存使用都做了一定的限制，主要是为了防止在备份期间影响了用户正常使用电脑工作。但如果你正在等它完成备份，再去进行系统升级或其他操作，就比较悲剧了。</p>

<h2 id="toc_2">macOS 时光机器备份加速命令</h2>

<p>如果你真的打算让时光机器全力全速工作，那也是有办法的，就是通过命令行，用命令强制关闭系统对时光机器的限流，俗称“解除封印”。打开终端，输入以下命令：</p>

<pre class="line-numbers"><code class="language-shell">sudo sysctl debug.lowpri_throttle_enabled=0
</code></pre>

<p>这时你就会发现时光机器的备份速度变快很多很多了！！基本能达到网络和硬盘读写的应有的速度了。等它完成了首次的备份之后，你可以再执行下面的命令，恢复到原本限流的状态，以保证日后使用电脑时不被时光机器备份占去太多的资源导致变卡。</p>

<pre class="line-numbers"><code class="language-shell">sudo sysctl debug.lowpri_throttle_enabled=1
</code></pre>

<p>当然了，如果你的时光机器备份是保存在 NAS 或路由器上网络存储的，都推荐连接“网线”进行首次备份，比起 WiFi 的速度很稳定性都是要高很多。另外，如果你使用 MacBook 的话，记得还要接通电源再备份才能获得最好的速度哦。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac MAMP安装libsodium扩展]]></title>
    <link href="https://hyter.me/mac-mamp-install-libsodium-php.html"/>
    <updated>2019-08-28T09:55:55+08:00</updated>
    <id>https://hyter.me/mac-mamp-install-libsodium-php.html</id>
    <content type="html"><![CDATA[
<p>微信支付新的v3版本的接口中加密方式改用了<code>AES-GCM</code>加密算法，在php7.1以上是默认自带的，php7.1以下的就需要安装libsodium-php扩展，这里我们来讲libsodium-php扩展的安装。</p>

<span id="more"></span><!-- more -->

<p>1.在官网下载对应版本的libsodium-php包 </p>

<pre class="line-numbers"><code class="language-text">http://pecl.php.net/get/libsodium-1.0.7.tgz
</code></pre>

<p>2.解压 找到需要的扩展目录 例如我要的是OpenSource</p>

<pre class="line-numbers"><code class="language-shell">cd ~/Desktop/OpenSource/libsodium-1.0.7
</code></pre>

<p>3.执行你所用php版本的phpize 而不是默认的</p>

<pre class="line-numbers"><code class="language-text">/Applications/MAMP/bin/php/php5.6.40/bin/phpize
</code></pre>

<p>4.编译 <code>注意版本</code></p>

<pre class="line-numbers"><code class="language-text">./configure --with-php-config=/Applications/MAMP/bin/php/php5.6.40/bin/php-config 
make
make install
</code></pre>

<p>5.修改MAMP 中php 的扩展加上</p>

<pre class="line-numbers"><code class="language-text">extension=libsodium.so
</code></pre>

<p>如果你和我一样没有./configure 折腾半天，注意看错误提示，<br/>
例如：autoconf 和 m4 没有安装 或者版本 太老</p>

<pre class="line-numbers"><code class="language-text">brew install autoconf
brew install m4
</code></pre>

<p>m4安装之后 记得让MAMP 下面 使用新安装的m4</p>

<pre class="line-numbers"><code class="language-text">cd /Applications/MAMP/Library/bin
mv m4 m4.old
ln -s /usr/local/opt/m4/bin/m4 ./m4
</code></pre>

<p>还有可能 你是没有安装libsodium</p>

<pre class="line-numbers"><code class="language-text">brew install libsodium
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beyond Compare在Mac OS系统下永久试用]]></title>
    <link href="https://hyter.me/beyond-compare-mac-pojie.html"/>
    <updated>2019-08-23T09:11:41+08:00</updated>
    <id>https://hyter.me/beyond-compare-mac-pojie.html</id>
    <content type="html"><![CDATA[
<p>Beyond Compare 是一个非常好用的一个文件对比软件，但是，免费就30天策略。（资金允许请支持正版授权）</p>

<span id="more"></span><!-- more -->

<p>如果已经安装了的，直接执行 第四步 ，亲测可用<br/>
一、原理<br/>
Beyond Compare每次启动后会先检查注册信息，试用期到期后就不能继续使用。解决方法是在启动前，先删除注册信息，然后再启动，这样就可以永久免费试用了。</p>

<p>二、下载<br/>
首先下载Beyond Compare最新版本，链接如下：<a href="https://www.scootersoftware.com/download.php">https://www.scootersoftware.com/download.php</a></p>

<p>三、安装<br/>
下载完成后，直接安装。</p>

<p>四、创建BCompare文件<br/>
1.进入Mac应用程序目录下，找到刚刚安装好的Beyond Compare，路径如下/Applications/Beyond Compare.app/Contents/MacOS。<br/>
2.修改启动程序文件BCompare为BCompare.real。<br/>
3.在当前目录下新建一个文件BCompare，文件内容如下：</p>

<pre class="line-numbers"><code class="language-bash">#!/bin/bash
rm &quot;/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat&quot;
&quot;`dirname &quot;$0&quot;`&quot;/BCompare.real $@
</code></pre>

<p>4.保存BCompare文件。<br/>
5.修改文件的权限：</p>

<pre class="line-numbers"><code class="language-bash">chmod a+x /Applications/Beyond\ Compare.app/Contents/MacOS/BCompare
</code></pre>

<p>以上步骤完成后，再次打开Beyond Compare就可以正常使用了，enjoy it。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上Django2安装mysqlclient失败 解决方案]]></title>
    <link href="https://hyter.me/mac-django-mysqlclient-error.html"/>
    <updated>2019-07-18T22:28:01+08:00</updated>
    <id>https://hyter.me/mac-django-mysqlclient-error.html</id>
    <content type="html"><![CDATA[
<p>今天安装了一下午的mysqlclient一直失败，直到晚上，现在把处理的流程记录一下。</p>

<span id="more"></span><!-- more -->

<pre class="line-numbers"><code class="language-bash"># 安装mysql驱动，你的电脑很可能已经安装过了
brew install mysql-connector-c

# 安装mysqlclient
pip install mysqlclient
</code></pre>

<p>然后万恶的报错了，你懂的。</p>

<pre class="line-numbers"><code class="language-bash">Collecting mysqlclient
  Using cached mysqlclient-1.4.2.tar.gz
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):
      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
      File &quot;/private/var/folders/rv/a_a/T/pip-build-nyaa8t95/mysqlclient/setup.py&quot;, line 17, in &lt;module&gt;
        metadata, options = get_config()
      File &quot;/private/var/folders/rv/a_a/T/pip-build-nyaa8t95/mysqlclient/setup_posix.py&quot;, line 54, in get_config
        libraries = [dequote(i[2:]) for i in libs if i.startswith(&#39;-l&#39;)]
      File &quot;/private/var/folders/rv/a_a/T/pip-build-nyaa8t95/mysqlclient/setup_posix.py&quot;, line 54, in &lt;listcomp&gt;
        libraries = [dequote(i[2:]) for i in libs if i.startswith(&#39;-l&#39;)]
      File &quot;/private/var/folders/rv/a_a/T/pip-build-nyaa8t95/mysqlclient/setup_posix.py&quot;, line 12, in dequote
        if s[0] in &quot;\&quot;&#39;&quot; and s[0] == s[-1]:
    IndexError: string index out of range
</code></pre>

<p>出现这个问题的原因是mysql-connector-c中配置项有误。</p>

<p>具体针对mac来说，你需要顺藤摸瓜找到mysql_config的真身，即/usr/local/Cellar/mysql-connector-c/6.1.11/bin/mysql_config</p>

<pre class="line-numbers"><code class="language-bash">cd /usr/local/Cellar/mysql-connector-c/6.1.11/bin/mysql_config

# 修改前先备份
cp  mysql_config mysql_config.backup

# 使用vi修改配置文件
sudo vi mysql_config

# 114 gg跳转到 114行

将
&gt; # Create options 
&gt; libs=&quot;-L$pkglibdir&quot;
&gt; libs=&quot;$libs -l &quot;

替换为

&gt; # Create options 
&gt; libs=&quot;-L$pkglibdir&quot;
&gt; libs=&quot;$libs -lmysqlclient -lssl -lcrypto&quot;



然后保存即可。

#  然后重新运行mysqlclient安装命令
pip install mysqlclient
</code></pre>

<p>然后还是报错了</p>

<pre class="line-numbers"><code class="language-bash">    ld: library not found for -lssl
    clang: error: linker command failed with exit code 1 (use -v to see invocation)
    error: command &#39;gcc&#39; failed with exit status 1
    ----------------------------------------
ERROR: Command &quot;/Users/wangxiaoming/Desktop/HyterMatrix/Python/mysite/venv/bin/python -u -c &#39;import setuptools, tokenize;__file__=&#39;&quot;&#39;&quot;&#39;/private/var/folders/q0/sp2k72516td35kgjr1h7kty00000gn/T/pip-install-kce8c8yd/mysqlclient/setup.py&#39;&quot;&#39;&quot;&#39;;f=getattr(tokenize, &#39;&quot;&#39;&quot;&#39;open&#39;&quot;&#39;&quot;&#39;, open)(__file__);code=f.read().replace(&#39;&quot;&#39;&quot;&#39;\r\n&#39;&quot;&#39;&quot;&#39;, &#39;&quot;&#39;&quot;&#39;\n&#39;&quot;&#39;&quot;&#39;);f.close();exec(compile(code, __file__, &#39;&quot;&#39;&quot;&#39;exec&#39;&quot;&#39;&quot;&#39;))&#39; install --record /private/var/folders/q0/sp2k72516td35kgjr1h7kty00000gn/T/pip-record-k3eo05p8/install-record.txt --single-version-externally-managed --compile --install-headers /Users/wangxiaoming/Desktop/HyterMatrix/Python/mysite/venv/include/site/python3.6/mysqlclient&quot; failed with error code 1 in /private/var/folders/q0/sp2k72516td35kgjr1h7kty00000gn/T/pip-install-kce8c8yd/mysqlclient/
</code></pre>

<p>似乎没有安装gcc ，安装gcc之前要看装xcode 命令行工具</p>

<pre class="line-numbers"><code class="language-bash">xcode-select --install

# 然后
brew install gcc

#  然后重新运行mysqlclient安装命令
pip install mysqlclient
</code></pre>

<p>然后。。还是报错了</p>

<pre class="line-numbers"><code class="language-bash"> ERROR: Complete output from command /Users/wangxiaoming/Desktop/HyterMatrix/Python/mysite/venv/bin/python -u -c &#39;import setuptools, tokenize;__file__=&#39;&quot;&#39;&quot;&#39;/private/var/folders/q0/sp2k72516td35kgjr1h7kty00000gn/T/pip-install-db871pdy/mysqlclient/setup.py&#39;&quot;&#39;&quot;&#39;;f=getattr(tokenize, &#39;&quot;&#39;&quot;&#39;open&#39;&quot;&#39;&quot;&#39;, open)(__file__);code=f.read().replace(&#39;&quot;&#39;&quot;&#39;\r\n&#39;&quot;&#39;&quot;&#39;, &#39;&quot;&#39;&quot;&#39;\n&#39;&quot;&#39;&quot;&#39;);f.close();exec(compile(code, __file__, &#39;&quot;&#39;&quot;&#39;exec&#39;&quot;&#39;&quot;&#39;))&#39; install --record /private/var/folders/q0/sp2k72516td35kgjr1h7kty00000gn/T/pip-record-jp4c8fy1/install-record.txt --single-version-externally-managed --compile --install-headers /Users/wangxiaoming/Desktop/HyterMatrix/Python/mysite/venv/include/site/python3.6/mysqlclient:
</code></pre>

<p>这里是需要没有openssl的环境变量。如果是用的venv虚拟环境，需要在虚拟环境里添加</p>

<pre class="line-numbers"><code class="language-bash">export LDFLAGS=&quot;-L/usr/local/opt/openssl/lib&quot;
export CPPFLAGS=&quot;-I/usr/local/opt/openssl/include&quot;

#  然后重新运行mysqlclient安装命令
pip install mysqlclient
</code></pre>

<p>这一次终于出现了</p>

<pre class="line-numbers"><code class="language-bash">Successfully installed mysqlclient-1.4.2.post1
</code></pre>

<p>泪奔了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 设置阿里pip源]]></title>
    <link href="https://hyter.me/mac-pip-source.html"/>
    <updated>2019-07-17T08:19:22+08:00</updated>
    <id>https://hyter.me/mac-pip-source.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-shell">mkdir ~/.pip

tee ~/.pip/pip.conf &lt;&lt;-&#39;EOF&#39;
[global]
index-url=http://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host=mirrors.aliyun.com
EOF
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义小尖角]]></title>
    <link href="https://hyter.me/html-jianjiao.html"/>
    <updated>2019-07-16T15:16:51+08:00</updated>
    <id>https://hyter.me/html-jianjiao.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-markup">.icon{
     display:inline-block;
     border-top:15px solid red;
     border-right:15px solid transparent;
     border-bottom:15px solid transparent;
     border-left:15px solid transparent;
}

&lt;div class=&quot;icon&quot;&gt;&lt;/div&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调用iconv和mb_convert_encoding会显示乱码或空白]]></title>
    <link href="https://hyter.me/php-iconv-qa.html"/>
    <updated>2019-07-16T15:11:41+08:00</updated>
    <id>https://hyter.me/php-iconv-qa.html</id>
    <content type="html"><![CDATA[
<p>比如“珺”字在单纯的调用iconv 和mb_convert_encoding会显示乱码或空白，解决办法：</p>

<pre class="line-numbers"><code class="language-php">$name = iconv(&quot;utf-8&quot;,&quot;gbk//IGNORE&quot;,$str);
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP关于SSH和SFTP相关方法]]></title>
    <link href="https://hyter.me/php-sftp.html"/>
    <updated>2019-07-16T15:08:00+08:00</updated>
    <id>https://hyter.me/php-sftp.html</id>
    <content type="html"><![CDATA[
<p>php支持ssh和sftp推送，原生不支持，需要装pecl的ssh2扩展。</p>

<ol>
<li>扩展安装：</li>
<li>SSH使用：</li>
</ol>

<pre class="line-numbers"><code class="language-php">extension_loaded(&#39;ssh2&#39;) #检查是否安装ssh2扩展模块
$conn = ssh2_connect(IP, PORT) #连接远程服务器，看是否网络通，返回连接资源
ssh2_auth_password($conn, $username, $password) #通过账号密码认证登陆远程远程服务
$ssh2_sft = ssh2_sftp($conn);# 获取sftp连接资源
ssh2_sftp_mkdir($ssh2_sftp, $path, 0777, true)#创建远程目录
ssh2_scp_send($conn, $localfile, $filename, 0777)#上传文件
</code></pre>

<p>在一些特殊情况下，比如在内网，外网主机被映射为内网一个内网ip时，ssh2_scp_send可能推送不出文件，并且还会一直发送，长时间不会返回上传状态，这个时候需要用使用sftp方式推送</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSA公钥格式PKCS#1,PKCS#8互转说明]]></title>
    <link href="https://hyter.me/rsa-pkcs1-to-pkcs8.html"/>
    <updated>2019-07-15T07:50:49+08:00</updated>
    <id>https://hyter.me/rsa-pkcs1-to-pkcs8.html</id>
    <content type="html"><![CDATA[
<p>PKCS#1 转 PKCS#8:</p>

<pre class="line-numbers"><code class="language-shell">openssl rsa -RSAPublicKey_in -in &lt;filename&gt; -pubout
</code></pre>

<p>PKCS#8 转 PKCS#1:</p>

<pre class="line-numbers"><code class="language-shell">openssl rsa -pubin -in &lt;filename&gt; -RSAPublicKey_out
</code></pre>

<span id="more"></span><!-- more -->

<p>PKCS#1 格式密钥：</p>

<pre class="line-numbers"><code class="language-text">-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEArT82k67xybiJS9AD8nNAeuDYdrtCRaxkS6cgs8L9h83eqlDTlrdw
zBVSv5V4imTq/URbXn4K0V/KJ1TwDrqOI8hamGB0fvU13WW1NcJuv41RnJVua0QA
lS3tS1JzOZpMS9BEGeFvyFF/epbi/m9+2kUWG94FccArNnBtBqqvFncXgQsm98JB
3a62NbS1ePP/hMI7Kkz+JNMyYsWkrOUFDCXAbSZkWBJekY4nGZtK1erqGRve8Jbx
TWirAm/s08rUrjOuZFA21/EI2nea3DidJMTVnXVPY2qcAjF+595shwUKyTjKB8v1
REPB3hPF1Z75O6LwuLfyPiCrCTmVoyfqjwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>PKCS#8 格式密钥：</p>

<pre class="line-numbers"><code class="language-text">-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArT82k67xybiJS9AD8nNA
euDYdrtCRaxkS6cgs8L9h83eqlDTlrdwzBVSv5V4imTq/URbXn4K0V/KJ1TwDrqO
I8hamGB0fvU13WW1NcJuv41RnJVua0QAlS3tS1JzOZpMS9BEGeFvyFF/epbi/m9+
lkUWG94FccArNnBtBqqvFncXgQsm98JB3a42NbS1ePP/hMI7Kkz+JNMyYsWkrOUF
DCXAbSZkWBJekY4nGZtK1erqGRve8JbxTWirAm/s08rUrjOuZFA21/EI2nea3Did
JMTVnXVPY2qcAjF+595shwUKyTjKB8v1REPB3hPF1Z75O6LwuLfyPiCrCTmVoyfq
jwIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>转载自<a href="https://pay.weixin.qq.com/wiki/doc/api/tools/mch_pay.php?chapter=24_7">微信支付</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC下ssh报错，清除原有ssh密钥方法]]></title>
    <link href="https://hyter.me/mac-clear-ssh-keygen.html"/>
    <updated>2019-07-09T18:12:50+08:00</updated>
    <id>https://hyter.me/mac-clear-ssh-keygen.html</id>
    <content type="html"><![CDATA[
<p>mac的终端下面使用ssh user@localhost输入密码不能正常登录解决.<br/>
可可能由于远程服务器更换了证书或者重装服务器了，导致了证书变更了。<br/>
解决方法：</p>

<pre class="line-numbers"><code class="language-shell">ssh-keygen -R 192.168.1.203(你远程服务器的IP)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pem转pfx]]></title>
    <link href="https://hyter.me/pem-to-pfx.html"/>
    <updated>2019-07-03T17:15:56+08:00</updated>
    <id>https://hyter.me/pem-to-pfx.html</id>
    <content type="html"><![CDATA[
<pre class="line-numbers"><code class="language-shell">openssl req -new -key privkey.pem -out root.csr 
 
openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey privkey.pem -in root.csr -out root.crt 
 
openssl pkcs12 -export -in root.crt -inkey privkey.pem -out  an.pfx 
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP代码 ping 域名]]></title>
    <link href="https://hyter.me/php-ping-code.html"/>
    <updated>2019-06-19T15:58:32+08:00</updated>
    <id>https://hyter.me/php-ping-code.html</id>
    <content type="html"><![CDATA[
<p>在PHP代码中做ping</p>

<pre class="line-numbers"><code class="language-php">// ping 域名
function pingAddress($address,$proxy=false) {
    $status = -1;
        if (strcasecmp(PHP_OS, &#39;WINNT&#39;) === 0) {
            // Windows 服务器下
            $pingresult = exec(&quot;ping -n 1 {$address}&quot;, $outcome, $status);
        } elseif (strcasecmp(PHP_OS, &#39;Linux&#39;) === 0) {
            // Linux 服务器下
            $pingresult = exec(&quot;ping -c 1 {$address}&quot;, $outcome, $status);
        }elseif (strcasecmp(PHP_OS, &#39;Darwin&#39;) === 0){
            // MacOS 下
            $pingresult = exec(&quot;ping -c 1 {$address}&quot;, $outcome, $status);
        }
        if (0 == $status) {
            $status = true;
        } else {
            $status = false;
        }
    return $status;
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用git把某一次commit修改过的文件打包]]></title>
    <link href="https://hyter.me/git-diff-file-tar.html"/>
    <updated>2018-12-12T09:38:34+08:00</updated>
    <id>https://hyter.me/git-diff-file-tar.html</id>
    <content type="html"><![CDATA[
<p>把新增加的文件使用git add添加进改动</p>

<p>使用git commit提交改动</p>

<p>使用<code>git log</code>查看提交的commit id</p>

<p>使用命令</p>

<pre class="line-numbers"><code class="language-git">git diff-tree -r --no-commit-id --name-only [commit id] | xargs tar -rf mytarfile.tar

# or

git diff [old commit id] [commit id]  --name-only | xargs tar -czvf mytarfile.tar.gz
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中兴ZXHN F650设备管理密码]]></title>
    <link href="https://hyter.me/ZXHN-F650-Admin-Password.html"/>
    <updated>2019-02-15T09:00:02+08:00</updated>
    <id>https://hyter.me/ZXHN-F650-Admin-Password.html</id>
    <content type="html"><![CDATA[
<p>账号：telecomadmin<br/>
密码：nE7jA%5m%</p>

]]></content>
  </entry>
  
</feed>
